import pyttsx3
import speech_recognition as sr
import pyaudio
import requests
import google.generativeai as genai
import re
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import cv2
import os
import numpy as np

recognizer=sr.Recognizer()
engine = pyttsx3.init()
rate=engine.getProperty('rate')
engine.setProperty('rate',180)
voices=engine.getProperty('voices')
engine.setProperty('voice' , voices[1].id)




SPOTIPY_CLIENT_ID=''
SPOTIPY_CLIENT_SECRET=''


def camera():
    folder_name = "processed_frames"
    if not os.path.exists(folder_name):
        os.makedirs(folder_name)
    # Open the video file    
    cap = cv2.VideoCapture(0)
    
    frame_width = int(cap.get(3))
    frame_heigth = int(cap.get(4))

    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter('output.avi',fourcc,20.0,(frame_width,frame_heigth))
    frame_counter=0
    
    while True:
        ret, frame = cap.read()

        processed_frame = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        cv2.imshow('processed Frame', processed_frame)
    
    
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    
        elif cv2.waitKey(1) & 0xFF == ord(' '):
            
            
        out.write(processed_frame)
    
    cap.release()
    out.release()
    cv2.destroyAllWindows()

def get_spotify_client():
     return spotipy.Spotify(client_credentials_manager=SpotifyClientCredentials(client_id=SPOTIPY_CLIENT_ID,client_secret=SPOTIPY_CLIENT_SECRET))
    
def get_track_details(query):
     sp=get_spotify_client()
     results=sp.search(q=query,type='track',limit=1)
     if results['tracks']['items']:
         track=results['tracks']['items'][0]
         track_url=track['external_urls']['spotify']
         webbrowser.open(track_url)
     else:
         print("no tracks found for the query.")

def open_spotify_homepage():
     spotify_homepage_url="https://www.spotify.com"
     webbrowser.open(spotify_homepage_url)

def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)
    try:
        print("Recognizing...")
        text = recognizer.recognize_google(audio)
        return text
    except sr.UnknownValueError:
        return "Sorry, I did not understand that."
    except sr.RequestError:
        return "Could not request results; check your network connection."

def chat_with_gpt(prompt):
    

    os.environ['GOOGLE_API_KEY'] = ""
    genai.configure(api_key = os.environ['GOOGLE_API_KEY'])
    model = genai.GenerativeModel('gemini-pro')

    

    response = chat.send_message(prompt)
    return response.text
    
if __name__ == "__main__":
    
    print("Just say Mokshi before saying anything")
    speak("Just say Mokshi before saying anything")
    print("Your assistant was ready!")
    speak("Your assistant was ready!")
    print("Hello! How can I help u today?")
    speak("Hello! How can I help u today?")
    user_input=listen().lower()
    print(f"You said: {user_input}")
    if user_input in ["mokshia open chatgpt","mokshi open gemini"]:
        print("What was your question")
        speak("What was your question")
        while True:
            user_input = listen()
            print(f"You said: {user_input}")
            if user_input.lower() in ["exit", "quit", "bye"]:
                speak("Goodbye!")
                print("Goodbye!")
                break
            response = chat_with_gpt(user_input)
            print(f"ChatGPT or Gemini: {response}")
            speak(response)
    elif user_input.lower() in ["mokshia information"]:
        print("What kind of information u want")
        speak("What kind of information u want")
        user_input = listen().strip().lower()
        print(f"You said: {user_input}")
        print("Let's perform Google search!")
        speak("Let's perform Google Search!")
        kt.search(user_input)
        
    elif user_input.lower() in ["mokshia play video"]:
        print("What kind of video u want us to play")
        speak("What kind of video u want us to play")
        user_input = listen().strip().lower()
        print(f"You said: {user_input}")
        print("Let's perform Youtube search!")
        speak("Let's perform Youtube Search!")
        kt.playonyt(user_input)
        
    elif user_input.lower() in ["mokshia play songs"]:
        print("What kind of song u want us to play")
        speak("What kind of song u want us to play")
        command = listen()
        print(f"You said: {command}")
        print("Let's perform Spotify search!")
        speak("Let's perform Spotify Search!")
        match=re.search(r"open spotify and play (.+?) track",command.strip().lower())
        if match:
            search_query=match.group(1)
            get_track_details(search_query)
        else:
            print("command not recognized.please try again.")
            
    elif user_input.lower() in ["mokshai open camera"]:
        camera()
        
    elif user_input.lower() in ["exit", "quit", "bye"]:
        speak("Goodbye!")
        print("Goodbye!")
    elif user_input.lower() not in ["mokshi"]:
        print("Just say mokshi before starting anything")
        speak("Just say mokshi before starting anything")
    else:
        print("Could not found the requriments! Please try again")
        speak("Could not found the requriments! Please try again")
